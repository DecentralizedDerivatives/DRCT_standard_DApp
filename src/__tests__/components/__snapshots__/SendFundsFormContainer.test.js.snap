// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SendFundsFormContainer /> render() renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Form(SendFundsFormContainer)
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    arrayInsert={[Function]}
    arrayMove={[Function]}
    arrayPop={[Function]}
    arrayPush={[Function]}
    arrayRemove={[Function]}
    arrayRemoveAll={[Function]}
    arrayShift={[Function]}
    arraySplice={[Function]}
    arraySwap={[Function]}
    arrayUnshift={[Function]}
    asyncValidating={false}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    clearAsyncError={[Function]}
    clearFields={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    destroyOnUnmount={true}
    dirty={false}
    dispatch={[Function]}
    enableReinitialize={false}
    focus={[Function]}
    forceUnregisterOnUnmount={false}
    form="create-contract"
    getFormState={[Function]}
    initialize={[Function]}
    initialized={false}
    invalid={false}
    keepDirtyOnReinitialize={false}
    persistentSubmitErrors={false}
    pristine={true}
    pure={true}
    registerField={[Function]}
    reset={[Function]}
    resetSection={[Function]}
    setSubmitFailed={[Function]}
    setSubmitSucceeded={[Function]}
    shouldAsyncValidate={[Function]}
    shouldError={[Function]}
    shouldValidate={[Function]}
    shouldWarn={[Function]}
    startAsyncValidation={[Function]}
    startSubmit={[Function]}
    stopAsyncValidation={[Function]}
    stopSubmit={[Function]}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "unsubscribe": [Function],
        },
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
    submit={[Function]}
    submitFailed={false}
    submitSucceeded={false}
    submitting={false}
    syncErrors={Object {}}
    syncWarnings={Object {}}
    touch={[Function]}
    touchOnBlur={true}
    touchOnChange={false}
    unregisterField={[Function]}
    untouch={[Function]}
    updateSyncErrors={[Function]}
    updateSyncWarnings={[Function]}
    updateUnregisteredFields={false}
    userAccount=""
    valid={true}
    validExceptSubmit={true}
    validate={[Function]}
    values={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "anyTouched": false,
      "array": Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      },
      "asyncValidate": [Function],
      "asyncValidating": false,
      "autofill": [Function],
      "blur": [Function],
      "change": [Function],
      "clearAsyncError": [Function],
      "clearFields": [Function],
      "clearSubmit": [Function],
      "clearSubmitErrors": [Function],
      "destroy": [Function],
      "dirty": false,
      "dispatch": [Function],
      "error": undefined,
      "form": "create-contract",
      "handleSubmit": [Function],
      "initialValues": undefined,
      "initialize": [Function],
      "initialized": false,
      "invalid": false,
      "pristine": true,
      "pure": true,
      "reset": [Function],
      "resetSection": [Function],
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "storeSubscription": Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "unsubscribe": [Function],
        },
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      },
      "submit": [Function],
      "submitFailed": false,
      "submitSucceeded": false,
      "submitting": false,
      "touch": [Function],
      "triggerSubmit": undefined,
      "untouch": [Function],
      "userAccount": "",
      "valid": true,
      "validate": [Function],
      "warning": undefined,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "anyTouched": false,
        "array": Object {
          "insert": [Function],
          "move": [Function],
          "pop": [Function],
          "push": [Function],
          "remove": [Function],
          "removeAll": [Function],
          "shift": [Function],
          "splice": [Function],
          "swap": [Function],
          "unshift": [Function],
        },
        "asyncValidate": [Function],
        "asyncValidating": false,
        "autofill": [Function],
        "blur": [Function],
        "change": [Function],
        "clearAsyncError": [Function],
        "clearFields": [Function],
        "clearSubmit": [Function],
        "clearSubmitErrors": [Function],
        "destroy": [Function],
        "dirty": false,
        "dispatch": [Function],
        "error": undefined,
        "form": "create-contract",
        "handleSubmit": [Function],
        "initialValues": undefined,
        "initialize": [Function],
        "initialized": false,
        "invalid": false,
        "pristine": true,
        "pure": true,
        "reset": [Function],
        "resetSection": [Function],
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "storeSubscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": Subscription {
            "listeners": Object {
              "clear": [Function],
              "get": [Function],
              "notify": [Function],
              "subscribe": [Function],
            },
            "onStateChange": [Function],
            "parentSub": undefined,
            "store": Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            },
            "unsubscribe": [Function],
          },
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "unsubscribe": [Function],
        },
        "submit": [Function],
        "submitFailed": false,
        "submitSucceeded": false,
        "submitting": false,
        "touch": [Function],
        "triggerSubmit": undefined,
        "untouch": [Function],
        "userAccount": "",
        "valid": true,
        "validate": [Function],
        "warning": undefined,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
