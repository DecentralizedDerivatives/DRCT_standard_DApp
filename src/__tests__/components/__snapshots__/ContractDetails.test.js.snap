// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ContractDetails /> render() renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Connect(ContractDetails)
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "contract": Object {
        "contractAddress": "",
        "contractCurrentPrice": 0,
        "contractDuration": 0,
        "contractGain": 0,
        "contractMultiplier": 0,
        "contractOpenDates": Object {},
        "contractStartPrice": 0,
        "newContract": Object {
          "address": "",
          "amount": 0,
          "currency": "",
          "duration": "",
          "funded": false,
          "fundedTx": "",
          "id": "",
          "startDate": "",
        },
        "newContractCreateError": null,
        "newContractFundsError": null,
        "oracleAddress": "",
        "orderbook": Array [],
        "recentTrades": Array [],
      },
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "storeSubscription": Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      },
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "contract": Object {
          "contractAddress": "",
          "contractCurrentPrice": 0,
          "contractDuration": 0,
          "contractGain": 0,
          "contractMultiplier": 0,
          "contractOpenDates": Object {},
          "contractStartPrice": 0,
          "newContract": Object {
            "address": "",
            "amount": 0,
            "currency": "",
            "duration": "",
            "funded": false,
            "fundedTx": "",
            "id": "",
            "startDate": "",
          },
          "newContractCreateError": null,
          "newContractFundsError": null,
          "oracleAddress": "",
          "orderbook": Array [],
          "recentTrades": Array [],
        },
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "storeSubscription": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "unsubscribe": [Function],
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
