// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<CashOutFormContainer /> render() renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CashOutFormContainer
    anyTouched={false}
    array={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "removeAll": [Function],
        "shift": [Function],
        "splice": [Function],
        "swap": [Function],
        "unshift": [Function],
      }
    }
    asyncValidate={[Function]}
    asyncValidating={false}
    autofill={[Function]}
    blur={[Function]}
    change={[Function]}
    clearAsyncError={[Function]}
    clearFields={[Function]}
    clearSubmit={[Function]}
    clearSubmitErrors={[Function]}
    destroy={[Function]}
    dirty={false}
    dispatch={[Function]}
    form="cashout-form"
    handleSubmit={[Function]}
    initialize={[Function]}
    initialized={false}
    invalid={false}
    pristine={true}
    pure={true}
    reset={[Function]}
    resetSection={[Function]}
    sendCashOutRequest={[Function]}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": Subscription {
          "listeners": Object {
            "clear": [Function],
            "get": [Function],
            "notify": [Function],
            "subscribe": [Function],
          },
          "onStateChange": [Function],
          "parentSub": undefined,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
          "unsubscribe": [Function],
        },
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
    submit={[Function]}
    submitFailed={false}
    submitSucceeded={false}
    submitting={false}
    touch={[Function]}
    untouch={[Function]}
    userAccount=""
    userBalance={0}
    valid={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "handleSubmit": [Function],
      "onSubmit": [Function],
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "handleSubmit": [Function],
        "onSubmit": [Function],
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
