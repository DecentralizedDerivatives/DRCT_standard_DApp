// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<AppRouter /> renders the component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AppRouter
    checkUserConnection={[Function]}
    metamask={false}
    network={0}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
    whiteListed={false}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div
        className="app"
      >
        <Header
          isConnected={false}
          showTerms={[Function]}
          whiteListed={false}
        />
        <Route
          component={[Function]}
          exact={true}
          path="/"
        />
        <Switch>
          <Route
            component={[Function]}
            exact={true}
            path="/portfolio"
          />
          <Route
            component={[Function]}
            path="/bulletin"
          />
          <Route
            component={[Function]}
            path="/how-to"
          />
        </Switch>
        <Connect(BlockProgress) />
        <Connect(ConnectionModal) />
        
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Header
            isConnected={false}
            showTerms={[Function]}
            whiteListed={false}
          />,
          <Route
            component={[Function]}
            exact={true}
            path="/"
          />,
          <Switch>
            <Route
              component={[Function]}
              exact={true}
              path="/portfolio"
            />
            <Route
              component={[Function]}
              path="/bulletin"
            />
            <Route
              component={[Function]}
              path="/how-to"
            />
          </Switch>,
          <Connect(BlockProgress) />,
          <Connect(ConnectionModal) />,
          "",
          undefined,
        ],
        "className": "app",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "isConnected": false,
            "showTerms": [Function],
            "whiteListed": false,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "exact": true,
            "path": "/",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Route
                component={[Function]}
                exact={true}
                path="/portfolio"
              />,
              <Route
                component={[Function]}
                path="/bulletin"
              />,
              <Route
                component={[Function]}
                path="/how-to"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/portfolio",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "path": "/bulletin",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "path": "/how-to",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "",
        undefined,
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div
          className="app"
        >
          <Header
            isConnected={false}
            showTerms={[Function]}
            whiteListed={false}
          />
          <Route
            component={[Function]}
            exact={true}
            path="/"
          />
          <Switch>
            <Route
              component={[Function]}
              exact={true}
              path="/portfolio"
            />
            <Route
              component={[Function]}
              path="/bulletin"
            />
            <Route
              component={[Function]}
              path="/how-to"
            />
          </Switch>
          <Connect(BlockProgress) />
          <Connect(ConnectionModal) />
          
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Header
              isConnected={false}
              showTerms={[Function]}
              whiteListed={false}
            />,
            <Route
              component={[Function]}
              exact={true}
              path="/"
            />,
            <Switch>
              <Route
                component={[Function]}
                exact={true}
                path="/portfolio"
              />
              <Route
                component={[Function]}
                path="/bulletin"
              />
              <Route
                component={[Function]}
                path="/how-to"
              />
            </Switch>,
            <Connect(BlockProgress) />,
            <Connect(ConnectionModal) />,
            "",
            undefined,
          ],
          "className": "app",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "isConnected": false,
              "showTerms": [Function],
              "whiteListed": false,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "exact": true,
              "path": "/",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Route
                  component={[Function]}
                  exact={true}
                  path="/portfolio"
                />,
                <Route
                  component={[Function]}
                  path="/bulletin"
                />,
                <Route
                  component={[Function]}
                  path="/how-to"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "exact": true,
                  "path": "/portfolio",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "path": "/bulletin",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "path": "/how-to",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "",
          undefined,
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<AppRouter /> renders the component with data 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <AppRouter
    checkUserConnection={[Function]}
    metamask={true}
    network={4}
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "unsubscribe": [Function],
      }
    }
    whiteListed={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div
        className="app"
      >
        <Header
          isConnected={true}
          showTerms={[Function]}
          whiteListed={true}
        />
        <Route
          component={[Function]}
          exact={true}
          path="/"
        />
        <Switch>
          <Route
            component={[Function]}
            exact={true}
            path="/portfolio"
          />
          <Route
            component={[Function]}
            path="/bulletin"
          />
          <Route
            component={[Function]}
            path="/how-to"
          />
        </Switch>
        <Connect(BlockProgress) />
        <Connect(ConnectionModal) />
        
        <Redirect
          push={false}
          to="/bulletin"
        />
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Header
            isConnected={true}
            showTerms={[Function]}
            whiteListed={true}
          />,
          <Route
            component={[Function]}
            exact={true}
            path="/"
          />,
          <Switch>
            <Route
              component={[Function]}
              exact={true}
              path="/portfolio"
            />
            <Route
              component={[Function]}
              path="/bulletin"
            />
            <Route
              component={[Function]}
              path="/how-to"
            />
          </Switch>,
          <Connect(BlockProgress) />,
          <Connect(ConnectionModal) />,
          "",
          <Redirect
            push={false}
            to="/bulletin"
          />,
        ],
        "className": "app",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "isConnected": true,
            "showTerms": [Function],
            "whiteListed": true,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [Function],
            "exact": true,
            "path": "/",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Route
                component={[Function]}
                exact={true}
                path="/portfolio"
              />,
              <Route
                component={[Function]}
                path="/bulletin"
              />,
              <Route
                component={[Function]}
                path="/how-to"
              />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "exact": true,
                "path": "/portfolio",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "path": "/bulletin",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "path": "/how-to",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "",
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "push": false,
            "to": "/bulletin",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div
          className="app"
        >
          <Header
            isConnected={true}
            showTerms={[Function]}
            whiteListed={true}
          />
          <Route
            component={[Function]}
            exact={true}
            path="/"
          />
          <Switch>
            <Route
              component={[Function]}
              exact={true}
              path="/portfolio"
            />
            <Route
              component={[Function]}
              path="/bulletin"
            />
            <Route
              component={[Function]}
              path="/how-to"
            />
          </Switch>
          <Connect(BlockProgress) />
          <Connect(ConnectionModal) />
          
          <Redirect
            push={false}
            to="/bulletin"
          />
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Header
              isConnected={true}
              showTerms={[Function]}
              whiteListed={true}
            />,
            <Route
              component={[Function]}
              exact={true}
              path="/"
            />,
            <Switch>
              <Route
                component={[Function]}
                exact={true}
                path="/portfolio"
              />
              <Route
                component={[Function]}
                path="/bulletin"
              />
              <Route
                component={[Function]}
                path="/how-to"
              />
            </Switch>,
            <Connect(BlockProgress) />,
            <Connect(ConnectionModal) />,
            "",
            <Redirect
              push={false}
              to="/bulletin"
            />,
          ],
          "className": "app",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "isConnected": true,
              "showTerms": [Function],
              "whiteListed": true,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [Function],
              "exact": true,
              "path": "/",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Route
                  component={[Function]}
                  exact={true}
                  path="/portfolio"
                />,
                <Route
                  component={[Function]}
                  path="/bulletin"
                />,
                <Route
                  component={[Function]}
                  path="/how-to"
                />,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "exact": true,
                  "path": "/portfolio",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "path": "/bulletin",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "path": "/how-to",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "push": false,
              "to": "/bulletin",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
